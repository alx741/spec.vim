*spec.txt*       BDD (Behavior Driven Develpment) helper plugin
*Spec* *spec* *Spec.vim* *spec.vim* *specvim*
==============================================================================
CONTENTS                                                       *spec-contents*

    1. Intro........................................|spec-intro|
    2. Supported Languages..........................|spec-langs|
    3. Usage........................................|spec-usage|
    3. Boilerplate..................................|spec-boilerplate|
    4. Default Mappings.............................|spec-mappings|
    5. Configuration................................|spec-config|
    6. Credits......................................|spec-credits|

==============================================================================
INTRO                                                             *spec-intro*

*spec.vim* provides commands for easy jumping, creating and running BDD spec
test files for various supported languages.

Created spec files can have per-Language configurable boilerplate with
placeholder expansions. It also creates the spec test files following the `src`
directory structure and it's smart enough to prevent you from accidentally
creating spec files for the spec files.

==============================================================================
SUPPORTED LANGUAGES                                               *spec-langs*

Any BDD framework can be used by customizing the boilerplate for each language.
*spec.vim* ships with some defaults for the listed frameworks.

* Haskell (Hspec)(https://hspec.github.io/)
* PHP (PHPspec)(http://www.phpspec.net/en/stable/)
* Ruby (Rspec)(http://rspec.info/)

==============================================================================
USAGE                                                             *spec-usage*

Main Commands
-------------
Basic operations commands:

                                              *:SpecO* *:SpecOpen* *ghs*
  :SpecO[pen]         Toggle between source file and corresponding spec file.
                      Will fail if a spec file doesn't exist.

                                              *:SpecC* *:SpecCreate* *ghS*
  :SpecC[reate]       Create a spec file for the current source file. It will
                      keep the same source directory structure.


Splits variations
-----------------
These are commands variations for opening and creating spec files in a new
horizontal or vertical window split:

                                              *:SpecHO* *:SpecHOpen* *ghhs*
  :SpecHO[pen]        Same as |:SpecOpen|, but open in a new horizontal split.

                                              *:SpecVO* *:SpecVOpen* *ghvs*
  :SpecVO[pen]        Same as |:SpecOpen|, but open in a new vertical split.

                                              *:SpecHC* *:SpecHCreate* *ghhS*
  :SpecHC[reate]      Same as |:SpecCreate|, but create in a new horizontal
                      split.

                                              *:SpecVC* *:SpecVCreate* *ghvS*
  :SpecVC[reate]      Same as |:SpecCreate|, but create in a new vertical split.


Misc.
-----
                                                  *:SpecE* *:SpecEdit* *ghE*
  :SpecE[edit]        Edit the boilerplate file for the current language.


==============================================================================
BOILERPLATE                                                 *spec-boilerplate*

When a new spec file is created with |:SpecCreate|, some per-language
boilerplate will be added by default, you can customize it by editing the
language corresponding file in the |spec_boilerplate_dir| directory.

Boilerplate files have the name of the target language and the language
extension.

Placeholders
------------
Placeholders in the boilerplate files are surrounded by `%` and will be expanded
when spec files are created. Available placeholders are:

                                                 *srcName* *%srcName%*
  *%srcName%*       The name of the source file (without the extension).

                                               *specName* *%specName%*
  *%specName%*      The name of the spec file (without the extension).

                                               *srcDir* *%srcDir%*
  *%srcDir%*        The sources directory name.

                                               *specDir* *%specDir%*
  *%specDir%*       The specs directory name.

                                               *srcExt* *%srcExt%*
  *%srcExt%*        The source files extension.

                                               *specExt* *%specExt%*
  *%specExt%*       The spec files extension.

                                         *srcFilePath* *%srcFilePath%*
  *%srcFilePath%*   The path to the source file without the source directory
                  itself, nor the source file name.
                  Useful when importing a source file from a spec file using
                  the full path to it.


==============================================================================
CONFIGURATION                                                    *spec-config*


                                                *spec_disable_maps*
g:spec_disable_maps
                        Disables the default |spec-mappings|.
                        Defaults to 0.

                                                *spec_boilerplate_dir*
g:spec_boilerplate_dir
                        Defines the location of the |spec-boilerplate|
                        directory.
                        Defaults to plugin installation path.

                                                *spec_boilerplate_disable*
g:spec_boilerplate_disable
                        Disables the use of |spec-boilerplate| when creating new
                        spec files.
                        Defaults to 0.


Per-language configuration
--------------------------

You can configure the directories where your spec test files and normal source
files are kept as well as the prefix and suffix the spec files should have, so
for instance: a Ruby `src/module.rb` source file will have a corresponding
`spec/module_spec.rb` spec file, but a Haskell `src/Module.hs` will have a
`test/ModuleSpec.hs` spec file.

To change the default settings of a language use:

  let g:spec_language = {
      \   'spec_dir': 'test',
      \   'src_dir': 'src',
      \   'spec_extension': '',
      \   'src_extension': '',
      \   'spec_prefix': '',
      \   'spec_suffix': 'Spec'
      \ }

*spec_dir*          The name of the directory where your spec files live.

*src_dir*           The name of the directory where your source files live.

*spec_extension*    The extension of the spec files, useful for frameworks
                  with plain text spec files without extension.

*src_extension*     The extension of the source files, usually the language
                  extension.

*spec_prefix*       The spec file name prefix.

*spec_suffix*       The spec file name suffix.


==============================================================================
DEFAULT MAPPINGS                                               *spec-mappings*

`spec.vim` declares some default mappings for the most important commands.

*ghs*       |:SpecOpen|
*ghS*       |:SpecCreate|

*ghhs*      |:SpecHOpen|
*ghvs*      |:SpecVOpen|
*ghhS*      |:SpecHCreate|
*ghvS*      |:SpecVCreate|

*ghE*       |:SpecBoilerplateEdit|

==============================================================================
CREDITS                                                         *spec-credits*

Developed by Daniel Campoverde [alx741] <github.com/alx741>.

Git repository:       https://github.com/alx741/spec.vim

==============================================================================
vim:ft=help:et:ts=2:sw=2:sts=2:norl
